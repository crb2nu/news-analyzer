name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION=${{ github.event.inputs.version }}
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        # Generate changelog
        if [ -n "$PREV_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s" "$PREV_TAG"..HEAD | grep -E "^- (feat|fix|perf|refactor|style|test|build|ci|chore|revert):" || true)
        else
          CHANGELOG=$(git log --pretty=format:"- %s" | grep -E "^- (feat|fix|perf|refactor|style|test|build|ci|chore|revert):" || true)
        fi
        
        # Save changelog to file
        echo "## What's Changed" > changelog.md
        echo "" >> changelog.md
        echo "$CHANGELOG" >> changelog.md
        echo "" >> changelog.md
        echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREV_TAG}...${{ steps.get_version.outputs.version }}" >> changelog.md
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        name: Release ${{ steps.get_version.outputs.version }}
        body_path: changelog.md
        draft: false
        prerelease: false
        generate_release_notes: true

  build-release-images:
    needs: create-release
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        include:
          - component: scraper
            dockerfile: scraper/Dockerfile
            context: scraper
          - component: extractor
            dockerfile: extractor/Dockerfile
            context: extractor
          - component: notifier
            dockerfile: notifier/Dockerfile
            context: notifier
          - component: summarizer
            dockerfile: summarizer/Dockerfile
            context: summarizer
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up QEMU (multi-arch)
      uses: docker/setup-qemu-action@v3
      with:
        platforms: all

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push release images
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.context }}
        file: ${{ matrix.dockerfile }}
        push: true
        tags: |
          ghcr.io/${{ github.repository_owner }}/news-analyzer-${{ matrix.component }}:${{ needs.create-release.outputs.version }}
          ghcr.io/${{ github.repository_owner }}/news-analyzer-${{ matrix.component }}:latest
        labels: |
          org.opencontainers.image.title=news-analyzer-${{ matrix.component }}
          org.opencontainers.image.version=${{ needs.create-release.outputs.version }}
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  deploy-release:
    needs: [create-release, build-release-images]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'  # Only auto-deploy on tag push
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Deploy release to production
      run: |
        # Update deployments with release version
        VERSION=${{ needs.create-release.outputs.version }}
        
        kubectl set image cronjob/news-analyzer-scraper scraper=ghcr.io/${{ github.repository_owner }}/news-analyzer-scraper:${VERSION} -n news-analyzer
        kubectl set image deployment/summarizer summarizer=ghcr.io/${{ github.repository_owner }}/news-analyzer-summarizer:${VERSION} -n news-analyzer
        kubectl set image cronjob/news-analyzer-notifier notifier=ghcr.io/${{ github.repository_owner }}/news-analyzer-notifier:${VERSION} -n news-analyzer
        kubectl set image cronjob/news-analyzer-extractor extractor=ghcr.io/${{ github.repository_owner }}/news-analyzer-extractor:${VERSION} -n news-analyzer
        
        # Wait for rollout
        kubectl rollout status deployment/summarizer -n news-analyzer --timeout=10m
        
        # Tag the deployment
        kubectl annotate deployment --all -n news-analyzer release.version=${VERSION} --overwrite
        kubectl annotate deployment --all -n news-analyzer release.date=$(date -u +"%Y-%m-%dT%H:%M:%SZ") --overwrite
    
    - name: Send release notification
      run: |
        curl -d "News Analyzer ${VERSION} has been successfully deployed to production!" \
          -H "Title: ðŸš€ Release Deployed" \
          -H "Priority: 4" \
          -H "Tags: rocket,release" \
          http://ntfy.news-analyzer.svc.cluster.local/news-analyzer-releases || true
