name: Pull Request Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  code-quality:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [scraper, extractor, notifier, summarizer]
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install Poetry
      run: |
        pip install poetry
        poetry config virtualenvs.in-project true
    
    - name: Install dependencies and analysis tools
      run: |
        cd ${{ matrix.component }}
        poetry install --with dev --no-interaction
        poetry run pip install black bandit ruff mypy --quiet
    
    - name: Check code formatting
      run: |
        cd ${{ matrix.component }}
        poetry run black --check . || echo "Formatting issues found in ${{ matrix.component }}"
      continue-on-error: true
    
    - name: Security scan with Bandit
      run: |
        cd ${{ matrix.component }}
        poetry run bandit -r . -ll || echo "Security issues found in ${{ matrix.component }}"
      continue-on-error: true
    
    - name: Lint with Ruff
      run: |
        cd ${{ matrix.component }}
        poetry run ruff check . || echo "Linting issues found in ${{ matrix.component }}"
      continue-on-error: true
  
  check-secrets:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.pull_request.base.sha }}
        head: ${{ github.event.pull_request.head.sha }}
      continue-on-error: true
  
  docker-lint:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        dockerfile:
          - Dockerfile
          - extractor/Dockerfile
          - notifier/Dockerfile
          - summarizer/Dockerfile
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Lint Dockerfile
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: ${{ matrix.dockerfile }}
        ignore: DL3008,DL3009
      continue-on-error: true
  
  k8s-validate:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate Kubernetes manifests
      run: |
        # Install kubeval
        wget https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
        tar xf kubeval-linux-amd64.tar.gz
        sudo mv kubeval /usr/local/bin
        
        # Validate all YAML files in k8s directory
        find k8s/ -name '*.yaml' -o -name '*.yml' | xargs kubeval --skip-kinds RunnerDeployment,HorizontalRunnerAutoscaler,AutoscalingRunnerSet
      continue-on-error: true
  
  size-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check Docker image sizes
      run: |
        # Build images and check sizes
        docker build -f scraper/Dockerfile -t test-scraper:pr scraper
        docker build -f extractor/Dockerfile -t test-extractor:pr extractor
        docker build -f notifier/Dockerfile -t test-notifier:pr notifier
        docker build -f summarizer/Dockerfile -t test-summarizer:pr summarizer
        
        echo "=== Docker Image Sizes ==="
        docker images | grep test- | awk '{print $1 ": " $7}'
        
        # Check if any image is over 1GB
        LARGE_IMAGES=$(docker images | grep test- | awk '$7 ~ /G/ && substr($7, 1, length($7)-2) > 1 {print $1}')
        if [ ! -z "$LARGE_IMAGES" ]; then
          echo "⚠️ Warning: The following images are larger than 1GB:"
          echo "$LARGE_IMAGES"
        fi
        
        # Clean up
        docker rmi test-scraper:pr test-extractor:pr test-notifier:pr test-summarizer:pr
  
  test-coverage:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [scraper, extractor, notifier, summarizer]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install Poetry
      run: |
        pip install poetry
        poetry config virtualenvs.in-project true
    
    - name: Install dependencies
      run: |
        cd ${{ matrix.component }}
        poetry install --with dev --no-interaction
        poetry run pip install pytest pytest-cov --quiet
    
    - name: Run tests with coverage
      run: |
        cd ${{ matrix.component }}
        if [ -d "tests" ] || ls test_*.py 2>/dev/null || ls *_test.py 2>/dev/null; then
          poetry run pytest --cov=. --cov-report=term-missing --cov-report=xml || echo "Tests not configured for ${{ matrix.component }}"
        else
          echo "No tests found in ${{ matrix.component }}"
        fi
      continue-on-error: true
  
  pr-comment:
    needs: [code-quality, check-secrets, docker-lint, k8s-validate, size-check, test-coverage]
    runs-on: ubuntu-latest
    if: always()
    permissions:
      pull-requests: write
    
    steps:
    - name: Comment PR
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('## PR Check Results')
          });
          
          const body = `## PR Check Results
          
          | Check | Status |
          |-------|--------|
          | Code Quality | ${{ needs.code-quality.result }} |
          | Secret Scanning | ${{ needs.check-secrets.result }} |
          | Docker Lint | ${{ needs.docker-lint.result }} |
          | K8s Validation | ${{ needs.k8s-validate.result }} |
          | Size Check | ${{ needs.size-check.result }} |
          | Test Coverage | ${{ needs.test-coverage.result }} |
          
          ### GitHub-Hosted Runner
          This PR was checked using GitHub-hosted runners.
          
          ### Component Status
          All components (scraper, extractor, notifier, summarizer) have been checked.
          
          ### Next Steps
          - Review the check results above
          - Address any failing checks
          - Request review when ready
          `;
          
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
          }
